{"version":3,"sources":["redux/reducers/loginReducer.js","redux/reducers/selectedpost.js","redux/reducers/adsReducer.js","redux/reducers/index.js","components/Page404.js","components/login/LoginForm.js","components/dashboard/Dashboard.js","redux/actions/index.js","components/App.js","serviceWorker.js","index.js"],"names":["loginReducer","state","action","type","payload","INITIAL_STATE","selected","isopen","selectedPostReducer","adsReducer","_","mapKeys","combineReducers","form","formReducer","Page404","props","onClick","history","push","LoginForm","renderField","field","className","TextField","label","placeholder","error","meta","touched","invalid","helperText","input","custom","onSubmit","values","includes","username","SubmissionError","_error","password","window","alert","JSON","stringify","this","handleSubmit","pristine","reset","submitting","bind","Field","name","component","Button","disabled","variant","color","size","Component","reduxForm","validate","errors","forEach","Dashboard","getAllAds","map","ads","data-news","id","key","fileNumber","address","AdDetails","Object","Card","title","subtitle","length","renderAds","connect","request","axios","get","dispatch","then","data","App","exact","path","Boolean","location","hostname","match","store","applyMiddleware","thunk","createStore","ReactDOM","render","reducers","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47180b68.chunk.js","sourcesContent":["/**\r\n * @description LoginReducer for redux  just for test\r\n * @param {*} state \r\n * @param {*} action \r\n */\r\nconst loginReducer = (state = false, action) => {\r\n  switch(action.type){\r\n      case 'SIGN_IN':\r\n        return [!state, ...action.payload];\r\n      default:\r\n          return state;    \r\n  }\r\n}\r\nexport default loginReducer;","const INITIAL_STATE = {\r\n  selected : null,\r\n  isopen: false\r\n}\r\n\r\n/**\r\n * @description dashboardReducer for get the API data\r\n * @param {*} state \r\n * @param {*} action \r\n */\r\nconst selectedPostReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n        case 'SELECTEDPOST':\r\n            return { ...state, isopen: action.payload.isopen, selected: action.payload.selected}\r\n        case 'CLOSEMODAL':\r\n            return {...state, isopen: action.payload.isopen, selected: null}\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\nexport default selectedPostReducer;","import _ from 'lodash';\r\n\r\n/**\r\n * @description not used just for test\r\n * @param {*} state \r\n * @param {*} action \r\n */\r\nconst adsReducer = (state = {}, action) => {\r\n    switch(action.type){\r\n        case 'FETCH_ADS':\r\n          return _.mapKeys(action.payload, 'id');\r\n        default:\r\n            return state;    \r\n    }\r\n  }\r\n  export default adsReducer;\r\n\r\n","import { combineReducers } from 'redux';\r\nimport loginReducer from './loginReducer';\r\nimport selectedPostReducer from './selectedpost';\r\nimport adsReducer from './adsReducer'\r\nimport {  reducer as formReducer  } from 'redux-form';\r\n\r\nexport default combineReducers({\r\n  loginReducer: loginReducer,\r\n  selectedPostReducer: selectedPostReducer,\r\n  adsReducer: adsReducer,\r\n  form: formReducer\r\n});","import React from 'react';\r\n\r\nconst Page404=(props)=> {\r\n  return (\r\n    <div>\r\n      <h2>Page 404 !!!</h2>\r\n      <button onClick={()=>props.history.push('/')}>Go Home</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page404;","import React, { Component} from 'react';\r\nimport { Field, reduxForm, SubmissionError } from 'redux-form';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport './LoginForm.css';\r\n\r\n\r\n/**\r\n * @description make a simple login with redux-form\r\n */\r\nclass LoginForm extends Component {\r\n  \r\n    renderField = (field) => (\r\n        <div className=\"form-group\">\r\n          <div>\r\n            <TextField  type={field.type} label={field.label} placeholder={field.label} error={field.meta.touched && field.meta.invalid} helperText={field.meta.touched && field.meta.error} {...field.input} {...field.custom}/>\r\n          </div>    \r\n        </div>\r\n      )\r\n      /**\r\n       * @description signin button\r\n       */\r\n      onSubmit = (values) => {\r\n            // simple username and password for login----> admin admin\r\n            if (!['admin'].includes(values.username)) {\r\n              throw new SubmissionError({\r\n                username: 'User does not exist',\r\n                _error: 'Login failed!'\r\n              })\r\n            } else if (values.password !== 'admin') {\r\n              throw new SubmissionError({\r\n                password: 'Wrong password',\r\n                _error: 'Login failed!'\r\n              })\r\n            } else {\r\n              window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`);\r\n              this.props.history.push('/asanshahr');\r\n    \r\n            }\r\n        }\r\n    \r\n  render(){\r\n      const { error, handleSubmit, pristine, reset, submitting }= this.props;\r\n    return (\r\n        <form onSubmit={handleSubmit(this.onSubmit.bind(this))} className=\"form-login\">\r\n            <div>\r\n                <h3>SingnIn</h3>\r\n                <p>in this example username: <strong>admin</strong> and password: <strong>admin</strong> </p>\r\n            </div>\r\n          <Field\r\n            name=\"username\"\r\n            type=\"text\"\r\n            component={this.renderField}\r\n            label=\"Username\"\r\n          />\r\n          <Field\r\n            name=\"password\"\r\n            type=\"password\"\r\n            component={this.renderField}\r\n            label=\"Password\"\r\n          />\r\n          {/* {error && <strong>{error}</strong>} */}\r\n          <div className=\"form-button\">\r\n                <Button type=\"submit\" className=\"login-btn\" disabled={submitting} variant=\"contained\"  color=\"primary\" size=\"large\">\r\n                Log In\r\n                </Button>\r\n                <Button type=\"submit\" disabled={submitting} variant=\"contained\"  color=\"secondary\" size=\"large\" disabled={pristine || submitting} onClick={reset}>\r\n                Clear Values\r\n                </Button>\r\n          </div>\r\n        </form>\r\n      )\r\n  }\r\n}\r\n\r\nconst validate = values => {\r\n\r\nconst errors ={};\r\n//validate input:\r\nconst requiredFields = [\r\n    'username',\r\n    'password'\r\n  ]\r\n  requiredFields.forEach(field => {\r\n    if (!values[field]) {\r\n      errors[field] = 'Required'\r\n    }\r\n  })\r\n  if (\r\n    !values.username /* &&!/^[A-Z0-9]/i.test(values.username)*/) {\r\n    errors.username = 'Invalid username'\r\n  }\r\n  else if (\r\n   ! values.password\r\n  ) {\r\n    errors.username = 'Invalid password'\r\n  }\r\n//if error is empty the form is fine to submit\r\nreturn errors;\r\n}\r\n\r\n\r\n\r\n\r\nexport default reduxForm({\r\n    validate,\r\n  form: 'submitValidation' // a unique identifier for this form\r\n})(LoginForm)\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {getAllAds} from '../../redux/actions';\r\nimport { Card , CardTitle} from 'material-ui/Card';\r\nimport _ from 'lodash';\r\nimport './Dashboard.css';\r\n\r\n\r\n\r\nclass Dashboard extends Component{\r\n\r\n    /**\r\n     * @description get data from API with redux thunk\r\n     */\r\n    componentDidMount(){\r\n        this.props.getAllAds();\r\n    }\r\n\r\n    /**\r\n     * show a simple information of per form\r\n     */\r\n    renderAds() {\r\n       return _.map(this.props.adsReducer, ads => {\r\n         return (\r\n              <div className=\"news-container\" data-news={ads.id} key={ads.id}>\r\n                <div className=\"news-grid\">\r\n                    <div className=\"news-header\">\r\n                        <h4><strong>file Number : {ads.fileNumber}</strong></h4>\r\n                        <p><strong>Address:</strong>{(ads.address !== null )?ads.address:\"The house address is not registered\"}</p>\r\n                            {/* <button className=\"btn-post\" id={ads.id}  onClick={this.handleOpen}>read more</button> */}\r\n                    </div>\r\n                </div>  \r\n            </div>\r\n           );\r\n       });\r\n    }\r\n\r\n\r\n    render(){\r\n        const AdDetails = Object.values(this.props.adsReducer);\r\n        return(\r\n            <div>\r\n                <div className=\"header-dashboard\">\r\n                    <h2>DASHBOARD</h2>\r\n                </div>\r\n                <div className=\"post-loc\">\r\n                <CardTitle  title=\"New Posts\" subtitle=\"recent most important news about our group\" />\r\n                    {AdDetails.length > 0 ? this.renderAds():\r\n                        <Card>\r\n                            <CardTitle>please wait Asan Shahr API is loading ...</CardTitle>\r\n                        </Card>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToPreps = state => {\r\n    return{adsReducer: state.adsReducer};\r\n}\r\nexport default connect(mapStateToPreps, {getAllAds}) (Dashboard);","\r\nimport axios from 'axios';\r\nconst API_KEY = '?key=HARRYPOTTER';\r\n\r\n/**\r\n * @description get API with redux thunk for dashboard page\r\n */\r\nexport const getAllAds = () => {\r\n  const request =  axios.get(`http://api.asanshahr.com/api/offers${API_KEY}`);\r\n     return (dispatch) => {\r\n         request\r\n         .then(({data}) => \r\n             dispatch({\r\n                 type: 'FETCH_ADS',//action name\r\n                 payload: data//variable\r\n             })\r\n         )}\r\n }\r\n\r\n /**\r\n  * @description login page action Not used yet\r\n  * @param {*} email \r\n  * @param {*} password \r\n  */\r\nexport const signIn = (email, password) => {\r\n    return {\r\n      type: 'SIGN_IN',\r\n      payload: {\r\n        email:email,\r\n        password: password\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @description login page action\r\n   */\r\nexport const signOut = () => {\r\n    return {\r\n      type: 'SIGN_OUT'\r\n    };\r\n }","import React, { Component } from 'react';\nimport {BrowserRouter as Router,Route, Switch} from 'react-router-dom'\nimport Page404 from './Page404';\nimport LoginForm from './login/LoginForm';\nimport Dashboard from './dashboard/Dashboard';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n// import PrivateRoute from '../routes/privateRoute';for private login route\n// import PublicRoute from '../routes/publicRoute';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <MuiThemeProvider>\n      <div className={\"App\"}>\n        <Router>\n          <div>\n            <Switch>\n              <Route exact path={\"/\"} component={LoginForm}/>\n              <Route path={\"/asanshahr\"} component={Dashboard}/>\n              <Route component={Page404}/>\n            </Switch>\n          </div>\n        </Router>\n      </div>\n     </MuiThemeProvider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './redux/reducers';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst store = applyMiddleware(thunk)(createStore);\n\n\nReactDOM.render(\n\n  <Provider store={store(reducers)}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}